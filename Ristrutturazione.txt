# 🎯 Piano Semplice: v1.3 A2A → v2.0 Single-Agent Minimal

> **Obiettivo**: Tornare ad un singolo agente ADK pulito con MCP filesystem funzionante
> **Filosofia**: Start Simple, Iterate Fast
> **Branch**: `foreman-v2.0-single-agent`

---

## 📊 Situazione Attuale vs Target SEMPLICE

### 🏗️ **Struttura Attuale (v1.3 A2A) - Cosa c'è**
```
Orechestratore-ADK/
├── README.md                 # A2A focus
├── main.py                   # ✅ MANTIENI (con piccole modifiche)
├── orchestrator.py           # 🔄 SEMPLIFICA (rimuovi A2A, mantieni MCP)
├── a2a_calendar_tool.py      # ❌ ELIMINA (A2A client)
├── calendar_agent/           # ❌ ELIMINA (intero sistema A2A)
├── custom_tools.py           # ❌ ELIMINA (deprecated)
├── requirements.txt          # 🔄 PULISCI (rimuovi dipendenze A2A)
├── Documentazione/           # ✅ MANTIENI
└── .gitignore               # ✅ MANTIENI
```

### 🎯 **Target v2.0 SEMPLICE - Struttura Flat**
```
foreman-v2/
├── README.md                 # Single-agent focus
├── main.py                   # Entry point (minimal changes)
├── orchestrator.py           # SOLO: GoogleSearch + MCP Filesystem
├── requirements.txt          # MCP dependencies only
├── .env.example             # Environment template
├── Documentazione/           # Mantenuta
└── .gitignore               # Updated per rimuovere calendar_agent/
```

**Totale**: 6 file principali. Semplice e pulito! ✨

---

## 🗺️ Piano di Lavoro SEMPLIFICATO

### **📋 FASE 1: Pulizia (15 min)**

#### **Step 1.1: Elimina Componenti A2A**
```bash
# File/directory da ELIMINARE:
rm -rf calendar_agent/           # Sistema A2A completo
rm a2a_calendar_tool.py          # Client A2A
rm custom_tools.py               # Legacy wrapper
```

#### **Step 1.2: Update .gitignore**
```bash
# Rimuovi riferimenti a file eliminati
# calendar_agent/ non esiste più
# *.keys.json → sposta in calendar_agent/ (che non c'è più)
```

**Risultato Fase 1**: Repository pulito, solo file essenziali

### **📝 FASE 2: Semplifica Orchestratore (30 min)**

#### **Step 2.1: orchestrator.py - Focus Single Agent**

**COSA RIMUOVERE**:
- ❌ Import A2A: `from a2a_calendar_tool import a2a_calendar_check`
- ❌ A2A tool: `a2a_calendar_check` dalla lista tools
- ❌ Riferimenti A2A nei prompt
- ❌ Log A2A nel print di inizializzazione

**COSA MANTENERE**:
- ✅ GoogleSearch via AgentTool (funziona!)
- ✅ MCP Filesystem (funziona!)
- ✅ Prompt engineering base
- ✅ Configurazione MCP robusta

**Prompt Semplificato**:
```
Sei Foreman v2.0 Single-Agent, assistente AI con due capacità principali:

🌐 RICERCA WEB (GoogleSearchAgent):
- Notizie, informazioni aggiornate, persone famose, etc.

📁 FILESYSTEM (MCP):
- Crea, leggi, modifica file nella directory ~/foreman_workspace/

Scegli automaticamente lo strumento giusto in base alla richiesta.
```

#### **Step 2.2: Aggiorna Print di Inizializzazione**
```python
print(f"🎯 Foreman v2.0 Single-Agent - Architettura Semplificata")
print(f"🌐 GoogleSearch: ✅ ATTIVATO")
print(f"📁 MCP Filesystem: ✅ ATTIVATO")
print(f"📁 Workspace: {work_directory}")
print(f"✨ Ready for single-agent workflows!")
```

### **📦 FASE 3: Dipendenze (10 min)**

#### **Step 3.1: requirements.txt Pulito**
```txt
# Foreman v2.0 Single-Agent - Dependencies Minimal
google-adk>=1.1.0,<1.3.0
python-dotenv>=1.0.0
mcp>=1.10.0,<2.0.0
httpx>=0.25.0
anyio>=4.0.0
```

**RIMOSSO**:
- ❌ uvicorn (FastAPI A2A server)
- ❌ fastapi (A2A protocol)
- ❌ Altre dipendenze A2A specifiche

### **📚 FASE 4: Documentazione Minimal (15 min)**

#### **Step 4.1: README.md Semplice**
```markdown
# 🤖 Foreman v2.0 Single-Agent

> Single ADK Agent with GoogleSearch + MCP Filesystem
>
> [🔄 Looking for v1.3 A2A Multi-Agent? Switch to `main` branch]

## Quick Start
1. `python main.py`
2. "Cerca informazioni su Python" (GoogleSearch)
3. "Crea file test.txt" (MCP Filesystem)

## Features
- ✅ GoogleSearch via AgentTool
- ✅ MCP Filesystem operations
- ✅ Simple terminal interface
```

#### **Step 4.2: .env.example**
```bash
# Google Gemini API (REQUIRED)
GOOGLE_API_KEY=your_gemini_api_key_here
GOOGLE_GENAI_USE_VERTEXAI=FALSE
```

### **🧪 FASE 5: Test di Funzionamento (10 min)**

#### **Step 5.1: Smoke Test**
```bash
python main.py

# Test GoogleSearch
> "Chi è l'attuale papa?"

# Test MCP Filesystem
> "Crea un file hello.txt con contenuto Ciao mondo"
> "Leggi il contenuto del file hello.txt"
```

**Criteri di Successo**:
- ✅ Applicazione si avvia senza errori
- ✅ GoogleSearch funziona
- ✅ MCP Filesystem crea/legge file
- ✅ Nessun riferimento A2A/Calendar

---

## 🎯 File-by-File Action Plan

### ❌ **ELIMINA (3 file)**
| File | Motivo | Comando |
|------|--------|---------|
| `calendar_agent/` | Sistema A2A completo | `rm -rf calendar_agent/` |
| `a2a_calendar_tool.py` | Client A2A | `rm a2a_calendar_tool.py` |
| `custom_tools.py` | Legacy deprecated | `rm custom_tools.py` |

### 🔄 **MODIFICA (3 file)**
| File | Modifica | Complessità |
|------|----------|-------------|
| `orchestrator.py` | Rimuovi A2A, mantieni GoogleSearch+MCP | 🟡 Media |
| `requirements.txt` | Rimuovi dipendenze A2A | 🟢 Bassa |
| `README.md` | Riscrivi per Single-Agent | 🟢 Bassa |

### ✅ **MANTIENI (2 file)**
| File | Motivo | Action |
|------|--------|--------|
| `main.py` | Funziona già bene | Nessuna modifica |
| `Documentazione/` | Storia del progetto | Nessuna modifica |

### 🆕 **CREA (1 file)**
| File | Contenuto | Priorità |
|------|-----------|----------|
| `.env.example` | Template environment | 🟢 Bassa |

---

## ⚡ Risultato Finale

### **Architettura v2.0 Semplice**
```
Single ADK Agent "Foreman"
├── GoogleSearchAgent (via AgentTool wrapper)
├── MCP Filesystem Server (via MCPToolset)
└── Terminal Interface

Comunicazione: Interna (nessun HTTP/A2A)
Processi: 2 (Foreman + MCP filesystem server via npm)
Complessità: Minimal ✨
```

### **Vantaggi vs v1.3 A2A**
- ✅ **Più semplice**: No server A2A, no processi multipli HTTP
- ✅ **Più veloce**: No network calls interni
- ✅ **Più affidabile**: Meno punti di failure
- ✅ **Più facile debug**: Un solo processo principale
- ✅ **Codebase pulito**: Zero complessità A2A

### **Funzionalità Mantenute**
- ✅ **GoogleSearch**: Ricerche web real-time
- ✅ **File Operations**: Crea, leggi, modifica file
- ✅ **Conversazione**: Multi-turno con memoria
- ✅ **Workspace**: Directory ~/foreman_workspace/

### **Cosa Perdiamo (Temporaneamente)**
- ❌ **Calendar integration**: Nessun accesso Google Calendar
- ❌ **A2A Protocol**: Nessuna comunicazione multi-agent
- ❌ **Distributed Architecture**: Back to single process

---

## 📅 Timeline Realistica

| Fase | Durata | Rischio | Note |
|------|--------|---------|------|
| 1. Pulizia | 15 min | 🟢 Basso | Solo eliminazioni |
| 2. Orchestratore | 30 min | 🟡 Medio | Rimuovi A2A imports/calls |
| 3. Dipendenze | 10 min | 🟢 Basso | Edit requirements.txt |
| 4. Documentazione | 15 min | 🟢 Basso | README + .env.example |
| 5. Test | 10 min | 🟡 Medio | Verifica tutto funziona |

**Totale**: ~80 minuti per transizione completa

---

## ✅ Success Criteria

### **Funzionale**
- [ ] `python main.py` si avvia senza errori
- [ ] GoogleSearch risponde a "Chi è l'attuale papa?"
- [ ] MCP crea file: "Crea file test.txt con contenuto hello"
- [ ] MCP legge file: "Leggi il contenuto del file test.txt"

### **Code Quality**
- [ ] Zero import A2A nel codice
- [ ] Zero riferimenti calendar_agent/
- [ ] Dependencies minime e pulite
- [ ] README aggiornato per v2.0

### **Portfolio**
- [ ] Branch `main` preserva v1.3 A2A
- [ ] Branch `foreman-v2.0-single-agent` ha v2.0 Single-Agent
- [ ] Cross-reference tra le versioni nella documentazione

---

## 🚀 Next Steps (Post-Migration)

Una volta che v2.0 Single-Agent funziona:

1. **Refinement**: Migliora prompt engineering per tool selection
2. **MCP Expansion**: Aggiungi server MCP Calendar (senza A2A)
3. **Interface**: Eventuale Telegram bot integration
4. **Testing**: Unit test per ogni componente

Ma per ora: **Keep It Simple!** ✨
