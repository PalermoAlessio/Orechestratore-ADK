# Guida Implementazione Orchestratore ADK v1.2 - Integrazione MCP

> **‚ö†Ô∏è AGGIORNAMENTO VERSIONI 2025**: Questo documento usa le versioni pi√π recenti di ADK (1.0.0+) e MCP SDK (1.10.0+) con sintassi aggiornata e dependency corrette verificate a luglio 2025.

## üéØ Obiettivo Specifico v1.2

Estendere il **Foreman v1.1** esistente aggiungendo supporto per **Model Context Protocol (MCP)**:
- Implementare un server MCP locale (filesystem access)
- Integrare il server MCP con ADK usando `MCPToolset`
- Mantenere tutti i tool esistenti (ricerca web)
- Testare comunicazione client-server MCP
- Base solida per futuri server MCP pi√π complessi

## üìã Cos'√® MCP e Perch√© Integrarlo

### Model Context Protocol (MCP)
MCP √® un protocollo standardizzato che permette agli AI agent di:
- **Accedere a dati esterni** in modo strutturato
- **Riutilizzare tool** tra diverse applicazioni AI
- **Separare logica di business** dal core dell'agent
- **Scalare facilmente** aggiungendo nuovi server specializzati

### Architettura MCP
```
ADK Agent (client MCP) ‚Üí MCPToolset ‚Üí Server MCP (processo separato) ‚Üí Tool/Resource
```

### Vantaggi per Foreman v1.2
- **Modularit√†**: Tool specializzati in processi separati
- **Riusabilit√†**: Stesso server MCP usabile da altri agent
- **Standardizzazione**: Protocollo aperto supportato da molte applicazioni
- **Preparazione A2A**: Base per architettura distribuita futura

## üõ†Ô∏è Server MCP da Implementare: Filesystem

### Perch√© Filesystem Server?
- **Semplice da configurare** e testare
- **Utilit√† pratica**: Foreman potr√† leggere/scrivere file locali
- **Server MCP ufficiale** Node.js gi√† mantenuto e stabile
- **Integrazione diretta** con ADK documentata
- **Alternative Python**: Possibili con MCP SDK 1.10.0+ ma richiedono pi√π codice custom

### Funzionalit√† Filesystem Server
- **Lettura file**: Contenuto di file di testo, JSON, CSV
- **Scrittura file**: Creazione e modifica file
- **Navigazione directory**: Lista file e cartelle
- **Ricerca file**: Trova file per nome o pattern

## üìÅ Architettura v1.2

### Componenti Sistema
```
Foreman v1.2 (ADK Agent)
‚îú‚îÄ‚îÄ Tool esistenti:
‚îÇ   ‚îî‚îÄ‚îÄ google_search (ricerca web)
‚îî‚îÄ‚îÄ Nuovi MCP Tools:
    ‚îî‚îÄ‚îÄ MCPToolset ‚Üí Filesystem MCP Server (processo separato)
```

### Flusso Operativo
1. **Utente**: "Foreman, leggi il file config.json"
2. **ADK Agent**: Analizza richiesta, identifica tool MCP filesystem
3. **MCPToolset**: Comunica con Filesystem Server via stdio
4. **MCP Server**: Esegue operazione su file system locale
5. **Risposta**: Contenuto file restituito a Foreman ‚Üí utente

## üîß Implementazione Step-by-Step

### Step 1: Installazione Server MCP Filesystem

**Opzione A: Server Node.js Ufficiale (Consigliato)**
```bash
# Verificare Node.js (richiesto per server filesystem ufficiale)
node --version  # Richiesto: v18.0.0+
npm --version

# Se non installato, scaricare da https://nodejs.org/

# Installare server MCP filesystem ufficiale
npm install -g @modelcontextprotocol/server-filesystem

# Verificare installazione
npx @modelcontextprotocol/server-filesystem --help
```

**Opzione B: Server Python Custom (Alternativo)**
```bash
# Installare solo MCP Python SDK se preferisci server Python
pip install mcp>=1.10.0

# Nota: Useremo server Node.js ufficiale per semplicit√†
# Server Python custom possibile ma richiede pi√π codice
```

### Step 2: Aggiornare Requirements

**`requirements.txt`** (versioni aggiornate 2025)
```txt
google-adk>=1.0.0
python-dotenv>=1.0.0
mcp>=1.10.0
```

### Step 3: Aggiornare Orchestratore

**`orchestrator.py`** - versione v1.2 (ADK 1.0.0+ syntax)
```python
from google.adk.agents import LlmAgent
from google.adk.tools.mcp_tool.mcp_toolset import MCPToolset, StdioServerParameters
from google.adk.tools import google_search  # Tool esistente
import os
from dotenv import load_dotenv

# Carica variabili ambiente
load_dotenv()

def create_orchestrator():
    """Crea l'agente orchestratore v1.2 con supporto MCP (ADK 1.0.0+)"""

    # Configurazione percorso di lavoro per MCP filesystem
    # Il server avr√† accesso a questa directory e sottodirectory
    work_directory = os.path.expanduser("~/foreman_workspace")

    # Creare directory di lavoro se non esistente
    os.makedirs(work_directory, exist_ok=True)

    # Configurazione server MCP Filesystem (sintassi semplificata ADK 1.0.0+)
    filesystem_mcp = MCPToolset(
        connection_params=StdioServerParameters(
            command="npx",
            args=[
                "@modelcontextprotocol/server-filesystem",
                work_directory  # Directory accessibile al server
            ],
            env=None  # Usa variabili ambiente correnti
        )
    )

    # Istruzioni aggiornate per v1.2
    instruction = """
    Sei Foreman, un assistente intelligente e potente versione 1.2.

    Le tue nuove capacit√† includono:
    - Ricerca web con google_search (come v1.1)
    - Accesso al filesystem locale tramite MCP server
    - Lettura, scrittura e gestione file nel workspace ~/foreman_workspace/

    Quando l'utente chiede di:
    - Leggere un file: usa i tool MCP filesystem per accedere al contenuto
    - Scrivere un file: usa i tool MCP per creare/modificare file
    - Cercare informazioni online: usa google_search
    - Navigare directory: usa i tool MCP per esplorare il filesystem

    Sei molto preciso nel distinguere quando usare strumenti locali (MCP)
    vs strumenti web (google_search).

    Directory di lavoro: ~/foreman_workspace/
    Rispondi sempre in italiano.
    """

    # Creare l'agente con tool combinati (sintassi ADK 1.0.0+)
    orchestrator = LlmAgent(
        name="Foreman",
        model="gemini-2.0-flash",
        instruction=instruction,
        description="Assistente v1.2 con accesso filesystem MCP e ricerca web",
        tools=[
            google_search,    # Tool esistente v1.1
            filesystem_mcp    # Nuovo MCP toolset v1.2
        ]
    )

    print(f"‚úÖ Foreman v1.2 inizializzato (ADK {get_adk_version()})")
    print(f"üìÅ Workspace: {work_directory}")
    print(f"üîß Tool attivi: google_search + MCP filesystem")

    return orchestrator

def get_adk_version():
    """Recupera versione ADK installata"""
    try:
        import google.adk
        return getattr(google.adk, '__version__', 'unknown')
    except:
        return 'unknown'
```

### Step 4: Aggiornare Main Application

**`main.py`** - versione v1.2 (modifiche minime)
```python
import asyncio
import os
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.genai import types
from orchestrator import create_orchestrator

async def chat_loop():
    """Loop principale di conversazione v1.2"""

    # Verificare API key
    if not os.getenv('GOOGLE_API_KEY'):
        print("‚ùå ERRORE: GOOGLE_API_KEY non trovata nel file .env")
        return

    print("üöÄ Inizializzazione Foreman v1.2 con supporto MCP...")

    try:
        # Creare agente orchestratore v1.2
        orchestrator = create_orchestrator()

        # Setup runner e sessione
        runner = Runner(
            agent=orchestrator,
            app_name="Foreman_v1.2",
            session_service=InMemorySessionService()
        )

        # ID utente e sessione
        user_id = "user_local"
        session_id = "session_v1_2"

        print("‚úÖ Foreman v1.2 pronto! Nuove funzionalit√† MCP disponibili")
        print("üí° Comandi di test:")
        print("   - 'Crea un file test.txt con il contenuto Hello World'")
        print("   - 'Leggi il contenuto del file test.txt'")
        print("   - 'Lista tutti i file nella directory'")
        print("   - 'Cerca informazioni su Python online'")
        print("=" * 60)

        while True:
            # Input utente
            user_input = input("\nüßë Tu: ").strip()

            # Comandi uscita
            if user_input.lower() in ['quit', 'exit', 'bye']:
                print("üëã Arrivederci!")
                break

            if not user_input:
                continue

            # Preparare messaggio per ADK
            content = types.Content(
                role='user',
                parts=[types.Part(text=user_input)]
            )

            print("ü§ñ Foreman v1.2:", end=" ", flush=True)

            # Chiamare agente e mostrare risposta
            async for event in runner.run_async(
                new_message=content,
                user_id=user_id,
                session_id=session_id
            ):
                if event.is_final_response():
                    print(event.content.parts[0].text)
                    break

    except Exception as e:
        print(f"‚ùå Errore v1.2: {str(e)}")
        print("üîß Verifica:")
        print("   1. Node.js installato (node --version)")
        print("   2. Server MCP filesystem installato")
        print("   3. Directory ~/foreman_workspace/ accessibile")

def main():
    """Entry point applicazione v1.2"""
    print("üéØ Foreman v1.2 - Integrazione MCP Filesystem")
    print("=" * 60)

    # Eseguire loop conversazione
    asyncio.run(chat_loop())

if __name__ == "__main__":
    main()
```

### Step 5: Setup Workspace

**Creazione directory e file di test**
```bash
# Creare workspace Foreman
mkdir -p ~/foreman_workspace

# Creare file di test
echo "Questo √® un file di test per Foreman v1.2" > ~/foreman_workspace/test.txt
echo '{"version": "1.2", "features": ["MCP", "filesystem"]}' > ~/foreman_workspace/config.json

# Verificare setup
ls -la ~/foreman_workspace/
```

## ‚ñ∂Ô∏è Testing e Verifiche

### 1. Test Installazione MCP Server
```bash
# Test server MCP standalone (dovrebbe aprire browser)
npx @modelcontextprotocol/server-filesystem ~/foreman_workspace --help

# Se funziona, il server √® installato correttamente
```

### 2. Test Integrazione ADK
```bash
# Avviare Foreman v1.2
python main.py
```

### 3. Test Casi d'Uso

**Test 1: Lettura File**
```
üßë Tu: Leggi il contenuto del file test.txt
ü§ñ Foreman v1.2: [dovrebbe usare MCP per leggere e mostrare contenuto]
```

**Test 2: Scrittura File**
```
üßë Tu: Crea un file note.md con il titolo "Note Foreman v1.2"
ü§ñ Foreman v1.2: [dovrebbe creare file usando MCP]
```

**Test 3: Navigazione Directory**
```
üßë Tu: Mostrami tutti i file nella directory di lavoro
ü§ñ Foreman v1.2: [dovrebbe listare file usando MCP]
```

**Test 4: Combinazione MCP + Web**
```
üßë Tu: Cerca informazioni su Model Context Protocol online e salvale in un file ricerca.txt
ü§ñ Foreman v1.2: [dovrebbe usare google_search + MCP filesystem]
```

## ‚úÖ Criteri di Successo v1.2

### Funzionalit√† MCP
- [ ] Server MCP filesystem avvia correttamente
- [ ] ADK si connette al server MCP senza errori
- [ ] Tool MCP disponibili nell'agente
- [ ] Operazioni file (read/write) funzionanti
- [ ] Navigazione directory operativa

### Integrazione ADK
- [ ] Foreman combina tool MCP + google_search intelligentemente
- [ ] Nessun conflitto tra tool esistenti e nuovi
- [ ] Performance accettabile (< 10 secondi per operazioni file)
- [ ] Error handling robusto per problemi MCP

### Funzionalit√† End-to-End
- [ ] Pu√≤ leggere file esistenti nel workspace
- [ ] Pu√≤ creare nuovi file con contenuto specificato
- [ ] Pu√≤ modificare file esistenti
- [ ] Pu√≤ listare contenuto directory
- [ ] Combina ricerca web + salvataggio file locale

## üêõ Troubleshooting

### Problemi Comuni (Aggiornati 2025)

**Error: "No module named 'google.adk.tools.mcp_tool'"**
```bash
# Verificare versione ADK (richiesta 1.0.0+)
pip show google-adk

# Aggiornare se necessario
pip install --upgrade google-adk>=1.0.0
```

**Error: "MCPToolset() missing required arguments"**
```bash
# Sintassi cambiata in ADK 1.0.0+
# Vecchio: server_params=StdioServerParameters(...)
# Nuovo: connection_params=StdioServerParameters(...)
```

**Error: "MCP Python SDK version incompatible"**
```bash
# Verificare versione MCP SDK
pip show mcp

# Installare versione corrente
pip install --upgrade mcp>=1.10.0
```

**Error: "Server MCP filesystem not found"**
```bash
# Verificare installazione Node.js (v18.0.0+)
node --version

# Reinstallare server MCP
npm uninstall -g @modelcontextprotocol/server-filesystem
npm install -g @modelcontextprotocol/server-filesystem
```

**Error: "Permission denied" su workspace**
```bash
# Verifica permessi directory
ls -la ~/foreman_workspace/
chmod 755 ~/foreman_workspace/

# Crea directory se mancante
mkdir -p ~/foreman_workspace
```

**Performance: Server MCP lento**
```bash
# Timeout predefinito pu√≤ essere troppo basso
# ADK 1.0.0+ ha timeout configurabili nei MCPToolset
# Normale: Prima connessione MCP pu√≤ essere lenta
```

## üöÄ Estensioni Future

### v1.3: Server MCP Aggiuntivi
- **Database MCP**: Connessione a SQLite/PostgreSQL
- **API MCP**: Chiamate HTTP strutturate
- **Email MCP**: Invio/ricezione email

### v1.4: Server MCP Custom
- **Sheets MCP**: Connessione diretta Google Sheets
- **Calendar MCP**: Gestione eventi Calendar
- **Note MCP**: Integrazione Obsidian/Notion

### v2.0: Architettura Distribuita
- **MCP remoti**: Server su network/cloud
- **A2A + MCP**: Agenti con server MCP specializzati
- **Load balancing**: Pi√π istanze server MCP

## üìä Confronto v1.1 vs v1.2

| Aspetto | v1.1 | v1.2 |
|---------|------|------|
| Tool disponibili | google_search | google_search + MCP filesystem |
| Accesso filesystem | ‚ùå | ‚úÖ via MCP |
| Architettura | Monolitica | Client-server (preparazione distribuzione) |
| Estensibilit√† | Limitata | Alta (standard MCP) |
| Tool riusabilit√† | No | S√¨ (server MCP standard) |
| Processi | 1 (Foreman) | 2 (Foreman + MCP server) |

---

**Status**: üìã Ready for Implementation
**Prerequisiti**: Foreman v1.1 funzionante + Node.js v18.0.0+ + Python 3.9+
**Versioni**: ADK 1.0.0+, MCP SDK 1.10.0+, Node.js 18.0.0+
**Tempo stimato**: 3-4 ore implementazione + testing
**Risultato**: Base solida per architettura distribuita futura
