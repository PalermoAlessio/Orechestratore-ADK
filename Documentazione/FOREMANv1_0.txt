# Guida Implementazione Orchestratore ADK v1.0

## 🎯 Obiettivo Specifico

Creare un **orchestratore ADK base** che:
- Riceve input da tastiera (terminale)
- Processa il messaggio con Gemini
- Risponde direttamente senza tool esterni
- Funziona in locale su PC

**Questo è il primo mattone fondamentale** del sistema completo. Una volta che funziona, espanderemo con tool, Telegram, A2A, etc.

## 📋 Requisiti Versione 1.0

### Funzionalità Core
- [x] Input: Prompt da tastiera nel terminale
- [x] Processing: ADK Agent con Gemini 2.0/2.5
- [x] Output: Risposta testuale nel terminale
- [x] Conversazione: Supporto multi-turno con memoria sessione
- [x] Testing: Funzionamento locale verificabile

### Non Incluso in v1.0
- ❌ Tool esterni (ricerca, ora, etc.)
- ❌ Integrazione Telegram
- ❌ Protocollo A2A
- ❌ Audio/multimodale
- ❌ Server HTTP/API

## 🛠️ Setup Ambiente Sviluppo

### 1. Prerequisiti
```bash
# Python 3.9+ richiesto
python --version

# Creare virtual environment
python -m venv adk_env

# Attivare environment
# Windows:
adk_env\Scripts\activate
# macOS/Linux:
source adk_env/bin/activate
```

### 2. Installazione ADK
```bash
# Installare ADK stabile
pip install google-adk

# Verificare installazione
python -c "import google.adk; print('ADK installato correttamente')"
```

### 3. API Key Gemini
1. Andare su [Google AI Studio](https://aistudio.google.com/)
2. Creare nuovo API key
3. Salvare la key per configurazione

## 📁 Struttura Progetto v1.0

```
orchestrator_v1/
├── .env                    # Configurazione API key
├── orchestrator.py         # Agent ADK principale
├── main.py                 # Entry point applicazione
└── requirements.txt        # Dependencies Python
```

## 🔧 Implementazione Step-by-Step

### Step 1: File di Configurazione

**`.env`**
```env
# API Key Gemini (da Google AI Studio)
GOOGLE_API_KEY=your_actual_api_key_here

# Configurazione Gemini
GOOGLE_GENAI_USE_VERTEXAI=FALSE
```

**`requirements.txt`**
```txt
google-adk
python-dotenv
```

### Step 2: Agent Orchestratore

**`orchestrator.py`**
```python
from google.adk.agents import LlmAgent
from google.adk.models import LiteLlm
import os
from dotenv import load_dotenv

# Carica variabili ambiente
load_dotenv()

def create_orchestrator():
    """Crea l'agente orchestratore base"""

    # Configurazione modello Gemini
    model = LiteLlm(model="gemini/gemini-2.0-flash-exp")

    # Istruzioni per l'orchestratore
    instruction = """
    Sei un assistente intelligente e capace chiamato Orchestratore.

    Le tue caratteristiche:
    - Rispondi in modo chiaro e utile
    - Sei in grado di ragionare e analizzare richieste complesse
    - Mantieni un tono professionale ma amichevole
    - Se non sai qualcosa, ammettilo onestamente

    In futuro avrai accesso a tool specializzati, ma per ora rispondi
    basandoti sulle tue conoscenze interne.

    Rispondi sempre in italiano.
    """

    # Creare l'agente
    orchestrator = LlmAgent(
        name="Orchestratore",
        model=model,
        instruction=instruction,
        description="Assistente principale per gestione richieste utente"
    )

    return orchestrator
```

### Step 3: Applicazione Principale

**`main.py`**
```python
import asyncio
import os
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.genai import types
from orchestrator import create_orchestrator

async def chat_loop():
    """Loop principale di conversazione"""

    # Verificare API key
    if not os.getenv('GOOGLE_API_KEY'):
        print("❌ ERRORE: GOOGLE_API_KEY non trovata nel file .env")
        print("1. Vai su https://aistudio.google.com/")
        print("2. Crea un API key")
        print("3. Aggiungi GOOGLE_API_KEY=your_key nel file .env")
        return

    print("🚀 Inizializzazione Orchestratore ADK v1.0...")

    try:
        # Creare agente orchestratore
        orchestrator = create_orchestrator()

        # Setup runner e sessione
        runner = Runner(agent=orchestrator)
        session_service = InMemorySessionService()

        # ID utente e sessione (per memoria conversazione)
        user_id = "user_local"
        session_id = "session_v1"

        print("✅ Orchestratore pronto!")
        print("💡 Scrivi 'quit' o 'exit' per uscire")
        print("=" * 50)

        while True:
            # Input utente
            user_input = input("\n🧑 Tu: ").strip()

            # Comandi uscita
            if user_input.lower() in ['quit', 'exit', 'bye']:
                print("👋 Arrivederci!")
                break

            if not user_input:
                continue

            # Preparare messaggio per ADK
            content = types.Content(
                role='user',
                parts=[types.Part(text=user_input)]
            )

            print("🤖 Orchestratore:", end=" ", flush=True)

            # Chiamare agente e mostrare risposta
            async for event in runner.run_async(
                content=content,
                session_service=session_service,
                user_id=user_id,
                session_id=session_id
            ):
                if event.is_final_response():
                    print(event.content.parts[0].text)
                    break

    except Exception as e:
        print(f"❌ Errore: {str(e)}")
        print("🔧 Verifica configurazione e riprova")

def main():
    """Entry point applicazione"""
    print("🎯 Orchestratore ADK v1.0 - Test Base")
    print("=" * 50)

    # Eseguire loop conversazione
    asyncio.run(chat_loop())

if __name__ == "__main__":
    main()
```

## ▶️ Testing e Avvio

### 1. Installazione Dependencies
```bash
pip install -r requirements.txt
```

### 2. Configurazione API Key
1. Aprire file `.env`
2. Inserire API key Gemini ottenuta da Google AI Studio
3. Salvare file

### 3. Esecuzione
```bash
python main.py
```

### 4. Test Conversazione
Esempi di prompt per testare:

```
🧑 Tu: Ciao, come stai?
🤖 Orchestratore: Ciao! Sto bene, grazie. Sono pronto ad aiutarti...

🧑 Tu: Spiegami cosa sai fare
🤖 Orchestratore: Attualmente posso aiutarti con...

🧑 Tu: Risolvi questo problema di matematica: 15 + 27 * 3
🤖 Orchestratore: Il risultato è 96. Ho calcolato...

🧑 Tu: Raccontami una storia breve
🤖 Orchestratore: C'era una volta...
```

## ✅ Criteri di Successo v1.0

### Funzionalità Base
- [ ] Applicazione si avvia senza errori
- [ ] Accetta input da tastiera
- [ ] Risponde con Gemini tramite ADK
- [ ] Mantiene memoria conversazione (multi-turno)
- [ ] Gestisce comandi exit/quit
- [ ] Error handling per API key mancante

### Test di Qualità
- [ ] Risponde in italiano
- [ ] Mantiene contesto conversazione precedente
- [ ] Gestisce domande complesse ragionevolmente
- [ ] Performance accettabile (< 5 secondi per risposta)
- [ ] Non crash su input vuoti o strani

### Indicatori Tecnici
- [ ] Nessun error traceback durante uso normale
- [ ] Memory usage stabile (no memory leak)
- [ ] Log/output pulito e leggibile

## 🐛 Troubleshooting

### Problemi Comuni

**Error: "No module named 'google.adk'"**
```bash
# Soluzione: Reinstallare ADK
pip uninstall google-adk
pip install google-adk
```

**Error: "Invalid API key"**
```bash
# Soluzione: Verificare API key
1. Controllare file .env esiste
2. API key corretta da Google AI Studio
3. Nessun spazio extra nella key
```

**Error: "Event loop" issues**
```bash
# Soluzione: Verificare Python version
python --version  # Deve essere 3.9+
```

**Risposta molto lenta**
```bash
# Normale: Prima richiesta può essere lenta
# Richieste successive dovrebbero essere più veloci
```

## 🔄 Prossimi Passi (Future Versions)

### v1.1: Aggiunta Primo Tool
- Tool "ora corrente"
- Tool "calcolatrice"

### v1.2: MCP Integration
- Server MCP per funzionalità esterne

### v1.3: API Server Mode
- Esposizione come HTTP endpoint
- Preparazione per Telegram

### v2.0: Telegram Integration
- Bot Telegram + long polling
- Audio processing

### v3.0: Multi-Agent A2A
- Agenti specializzati indipendenti
- Comunicazione A2A

---

**Status**: 📋 Ready for Implementation
**Obiettivo**: Orchestratore base funzionante in locale
**Tempo stimato**: 2-3 ore setup + testing
**Prerequisiti**: Python 3.9+, API key Gemini
